// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jj/go/pkg/mod/fyne.io/fyne/v2@v2.6.1/app/app_darwin.go:1:1
//go:build !ci && !wasm && !test_web_driver && !mobile

package app

/*
#cgo CFLAGS: -x objective-c
#cgo LDFLAGS: -framework Foundation

#include <stdbool.h>
#include <stdlib.h>

bool isBundled();
void sendNotification(char *title, char *content);
*/
import _ "unsafe"
import (
	"fmt"
	"os/exec"
	"strings"
	"unsafe"

	"fyne.io/fyne/v2"
)

func (a *fyneApp) SendNotification(n *fyne.Notification) {
	if ( /*line :26:5*/_Cfunc_isBundled /*line :26:15*/)() {
		titleStr := ( /*line :27:15*/_Cfunc_CString /*line :27:23*/)(n.Title)
		defer func() func() { _cgo0 := /*line :28:16*/unsafe.Pointer(titleStr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :28:41*/_Cfunc_free(_cgo0); }}()()
		contentStr := ( /*line :29:17*/_Cfunc_CString /*line :29:25*/)(n.Content)
		defer func() func() { _cgo0 := /*line :30:16*/unsafe.Pointer(contentStr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :30:43*/_Cfunc_free(_cgo0); }}()()

		( /*line :32:3*/_Cfunc_sendNotification /*line :32:20*/)(titleStr, contentStr)
		return
	}

	fallbackNotification(n.Title, n.Content)
}

func escapeNotificationString(in string) string {
	noSlash := strings.ReplaceAll(in, "\\", "\\\\")
	return strings.ReplaceAll(noSlash, "\"", "\\\"")
}

//export fallbackSend
func fallbackSend(cTitle, cContent * /*line :45:37*/_Ctype_char /*line :45:43*/) {
	title := ( /*line :46:11*/_Cfunc_GoString /*line :46:20*/)(cTitle)
	content := ( /*line :47:13*/_Cfunc_GoString /*line :47:22*/)(cContent)
	fallbackNotification(title, content)
}

func fallbackNotification(title, content string) {
	template := `display notification "%s" with title "%s"`
	script := fmt.Sprintf(template, escapeNotificationString(content), escapeNotificationString(title))

	err := exec.Command("osascript", "-e", script).Start()
	if err != nil {
		fyne.LogError("Failed to launch darwin notify script", err)
	}
}
