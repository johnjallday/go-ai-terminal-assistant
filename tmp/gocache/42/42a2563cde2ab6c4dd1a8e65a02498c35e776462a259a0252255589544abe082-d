// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jj/go/pkg/mod/github.com/go-gl/glfw/v3.3/glfw@v0.0.0-20240506104042-037f3cc74f2a/time.go:1:1
package glfw

//#define GLFW_INCLUDE_NONE
//#include "glfw/include/GLFW/glfw3.h"
import _ "unsafe"

// GetTime returns the value of the GLFW timer. Unless the timer has been set
// using SetTime, the timer measures time elapsed since GLFW was initialized.
//
// The resolution of the timer is system dependent, but is usually on the order
// of a few micro- or nanoseconds. It uses the highest-resolution monotonic time
// source on each supported platform.
func GetTime() float64 {
	ret := float64(( /*line :14:17*/_Cfunc_glfwGetTime /*line :14:29*/)())
	panicError()
	return ret
}

// SetTime sets the value of the GLFW timer. It then continues to count up from
// that value.
//
// The resolution of the timer is system dependent, but is usually on the order
// of a few micro- or nanoseconds. It uses the highest-resolution monotonic time
// source on each supported platform.
func SetTime(time float64) {
	( /*line :26:2*/_Cfunc_glfwSetTime /*line :26:14*/)( /*line :26:16*/_Ctype_double /*line :26:24*/(time))
	panicError()
}

// GetTimerFrequency returns frequency of the timer, in Hz, or zero if an error occurred.
func GetTimerFrequency() uint64 {
	ret := uint64(( /*line :32:16*/_Cfunc_glfwGetTimerFrequency /*line :32:38*/)())
	panicError()
	return ret
}

// GetTimerValue returns the current value of the raw timer, measured in 1 / frequency seconds.
func GetTimerValue() uint64 {
	ret := uint64(( /*line :39:16*/_Cfunc_glfwGetTimerValue /*line :39:34*/)())
	panicError()
	return ret
}
