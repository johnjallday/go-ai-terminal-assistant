// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jj/go/pkg/mod/github.com/go-gl/glfw/v3.3/glfw@v0.0.0-20240506104042-037f3cc74f2a/input.go:1:1
package glfw

//#include <stdlib.h>
//#define GLFW_INCLUDE_NONE
//#include "glfw/include/GLFW/glfw3.h"
//void glfwSetJoystickCallbackCB();
//void glfwSetKeyCallbackCB(GLFWwindow *window);
//void glfwSetCharCallbackCB(GLFWwindow *window);
//void glfwSetCharModsCallbackCB(GLFWwindow *window);
//void glfwSetMouseButtonCallbackCB(GLFWwindow *window);
//void glfwSetCursorPosCallbackCB(GLFWwindow *window);
//void glfwSetCursorEnterCallbackCB(GLFWwindow *window);
//void glfwSetScrollCallbackCB(GLFWwindow *window);
//void glfwSetDropCallbackCB(GLFWwindow *window);
//float GetAxisAtIndex(float *axis, int i);
//unsigned char GetButtonsAtIndex(unsigned char *buttons, int i);
//float GetGamepadAxisAtIndex(GLFWgamepadstate *gp, int i);
//unsigned char GetGamepadButtonAtIndex(GLFWgamepadstate *gp, int i);
import _ "unsafe"

import (
	"image"
	"unsafe"
)

// Joystick corresponds to a joystick.
type Joystick int

// Joystick IDs.
const (
	Joystick1    Joystick = ( /*line :31:26*/_Ciconst_GLFW_JOYSTICK_1 /*line :31:42*/)
	Joystick2    Joystick = ( /*line :32:26*/_Ciconst_GLFW_JOYSTICK_2 /*line :32:42*/)
	Joystick3    Joystick = ( /*line :33:26*/_Ciconst_GLFW_JOYSTICK_3 /*line :33:42*/)
	Joystick4    Joystick = ( /*line :34:26*/_Ciconst_GLFW_JOYSTICK_4 /*line :34:42*/)
	Joystick5    Joystick = ( /*line :35:26*/_Ciconst_GLFW_JOYSTICK_5 /*line :35:42*/)
	Joystick6    Joystick = ( /*line :36:26*/_Ciconst_GLFW_JOYSTICK_6 /*line :36:42*/)
	Joystick7    Joystick = ( /*line :37:26*/_Ciconst_GLFW_JOYSTICK_7 /*line :37:42*/)
	Joystick8    Joystick = ( /*line :38:26*/_Ciconst_GLFW_JOYSTICK_8 /*line :38:42*/)
	Joystick9    Joystick = ( /*line :39:26*/_Ciconst_GLFW_JOYSTICK_9 /*line :39:42*/)
	Joystick10   Joystick = ( /*line :40:26*/_Ciconst_GLFW_JOYSTICK_10 /*line :40:43*/)
	Joystick11   Joystick = ( /*line :41:26*/_Ciconst_GLFW_JOYSTICK_11 /*line :41:43*/)
	Joystick12   Joystick = ( /*line :42:26*/_Ciconst_GLFW_JOYSTICK_12 /*line :42:43*/)
	Joystick13   Joystick = ( /*line :43:26*/_Ciconst_GLFW_JOYSTICK_13 /*line :43:43*/)
	Joystick14   Joystick = ( /*line :44:26*/_Ciconst_GLFW_JOYSTICK_14 /*line :44:43*/)
	Joystick15   Joystick = ( /*line :45:26*/_Ciconst_GLFW_JOYSTICK_15 /*line :45:43*/)
	Joystick16   Joystick = ( /*line :46:26*/_Ciconst_GLFW_JOYSTICK_16 /*line :46:43*/)
	JoystickLast Joystick = ( /*line :47:26*/_Ciconst_GLFW_JOYSTICK_LAST /*line :47:45*/)
)

// JoystickHatState corresponds to joystick hat states.
type JoystickHatState int

// Joystick Hat State IDs.
const (
	HatCentered  JoystickHatState = ( /*line :55:34*/_Ciconst_GLFW_HAT_CENTERED /*line :55:52*/)
	HatUp        JoystickHatState = ( /*line :56:34*/_Ciconst_GLFW_HAT_UP /*line :56:46*/)
	HatRight     JoystickHatState = ( /*line :57:34*/_Ciconst_GLFW_HAT_RIGHT /*line :57:49*/)
	HatDown      JoystickHatState = ( /*line :58:34*/_Ciconst_GLFW_HAT_DOWN /*line :58:48*/)
	HatLeft      JoystickHatState = ( /*line :59:34*/_Ciconst_GLFW_HAT_LEFT /*line :59:48*/)
	HatRightUp   JoystickHatState = ( /*line :60:34*/_Ciconst_GLFW_HAT_RIGHT_UP /*line :60:52*/)
	HatRightDown JoystickHatState = ( /*line :61:34*/_Ciconst_GLFW_HAT_RIGHT_DOWN /*line :61:54*/)
	HatLeftUp    JoystickHatState = ( /*line :62:34*/_Ciconst_GLFW_HAT_LEFT_UP /*line :62:51*/)
	HatLeftDown  JoystickHatState = ( /*line :63:34*/_Ciconst_GLFW_HAT_LEFT_DOWN /*line :63:53*/)
)

// GamepadAxis corresponds to a gamepad axis.
type GamepadAxis int

// Gamepad axis IDs.
const (
	AxisLeftX        GamepadAxis = ( /*line :71:33*/_Ciconst_GLFW_GAMEPAD_AXIS_LEFT_X /*line :71:58*/)
	AxisLeftY        GamepadAxis = ( /*line :72:33*/_Ciconst_GLFW_GAMEPAD_AXIS_LEFT_Y /*line :72:58*/)
	AxisRightX       GamepadAxis = ( /*line :73:33*/_Ciconst_GLFW_GAMEPAD_AXIS_RIGHT_X /*line :73:59*/)
	AxisRightY       GamepadAxis = ( /*line :74:33*/_Ciconst_GLFW_GAMEPAD_AXIS_RIGHT_Y /*line :74:59*/)
	AxisLeftTrigger  GamepadAxis = ( /*line :75:33*/_Ciconst_GLFW_GAMEPAD_AXIS_LEFT_TRIGGER /*line :75:64*/)
	AxisRightTrigger GamepadAxis = ( /*line :76:33*/_Ciconst_GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER /*line :76:65*/)
	AxisLast         GamepadAxis = ( /*line :77:33*/_Ciconst_GLFW_GAMEPAD_AXIS_LAST /*line :77:56*/)
)

// GamepadButton corresponds to a gamepad button.
type GamepadButton int

// Gamepad button IDs.
const (
	ButtonA           GamepadButton = ( /*line :85:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_A /*line :85:58*/)
	ButtonB           GamepadButton = ( /*line :86:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_B /*line :86:58*/)
	ButtonX           GamepadButton = ( /*line :87:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_X /*line :87:58*/)
	ButtonY           GamepadButton = ( /*line :88:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_Y /*line :88:58*/)
	ButtonLeftBumper  GamepadButton = ( /*line :89:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_LEFT_BUMPER /*line :89:68*/)
	ButtonRightBumper GamepadButton = ( /*line :90:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER /*line :90:69*/)
	ButtonBack        GamepadButton = ( /*line :91:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_BACK /*line :91:61*/)
	ButtonStart       GamepadButton = ( /*line :92:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_START /*line :92:62*/)
	ButtonGuide       GamepadButton = ( /*line :93:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_GUIDE /*line :93:62*/)
	ButtonLeftThumb   GamepadButton = ( /*line :94:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_LEFT_THUMB /*line :94:67*/)
	ButtonRightThumb  GamepadButton = ( /*line :95:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_RIGHT_THUMB /*line :95:68*/)
	ButtonDpadUp      GamepadButton = ( /*line :96:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_DPAD_UP /*line :96:64*/)
	ButtonDpadRight   GamepadButton = ( /*line :97:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_DPAD_RIGHT /*line :97:67*/)
	ButtonDpadDown    GamepadButton = ( /*line :98:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_DPAD_DOWN /*line :98:66*/)
	ButtonDpadLeft    GamepadButton = ( /*line :99:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_DPAD_LEFT /*line :99:66*/)
	ButtonLast        GamepadButton = ( /*line :100:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_LAST /*line :100:61*/)
	ButtonCross       GamepadButton = ( /*line :101:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_CROSS /*line :101:62*/)
	ButtonCircle      GamepadButton = ( /*line :102:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_CIRCLE /*line :102:63*/)
	ButtonSquare      GamepadButton = ( /*line :103:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_SQUARE /*line :103:63*/)
	ButtonTriangle    GamepadButton = ( /*line :104:36*/_Ciconst_GLFW_GAMEPAD_BUTTON_TRIANGLE /*line :104:65*/)
)

// GamepadState describes the input state of a gamepad.
type GamepadState struct {
	Buttons [15]Action
	Axes    [6]float32
}

// Key corresponds to a keyboard key.
type Key int

// These key codes are inspired by the USB HID Usage Tables v1.12 (p. 53-60),
// but re-arranged to map to 7-bit ASCII for printable keys (function keys are
// put in the 256+ range).
const (
	KeyUnknown      Key = ( /*line :120:24*/_Ciconst_GLFW_KEY_UNKNOWN /*line :120:41*/)
	KeySpace        Key = ( /*line :121:24*/_Ciconst_GLFW_KEY_SPACE /*line :121:39*/)
	KeyApostrophe   Key = ( /*line :122:24*/_Ciconst_GLFW_KEY_APOSTROPHE /*line :122:44*/)
	KeyComma        Key = ( /*line :123:24*/_Ciconst_GLFW_KEY_COMMA /*line :123:39*/)
	KeyMinus        Key = ( /*line :124:24*/_Ciconst_GLFW_KEY_MINUS /*line :124:39*/)
	KeyPeriod       Key = ( /*line :125:24*/_Ciconst_GLFW_KEY_PERIOD /*line :125:40*/)
	KeySlash        Key = ( /*line :126:24*/_Ciconst_GLFW_KEY_SLASH /*line :126:39*/)
	Key0            Key = ( /*line :127:24*/_Ciconst_GLFW_KEY_0 /*line :127:35*/)
	Key1            Key = ( /*line :128:24*/_Ciconst_GLFW_KEY_1 /*line :128:35*/)
	Key2            Key = ( /*line :129:24*/_Ciconst_GLFW_KEY_2 /*line :129:35*/)
	Key3            Key = ( /*line :130:24*/_Ciconst_GLFW_KEY_3 /*line :130:35*/)
	Key4            Key = ( /*line :131:24*/_Ciconst_GLFW_KEY_4 /*line :131:35*/)
	Key5            Key = ( /*line :132:24*/_Ciconst_GLFW_KEY_5 /*line :132:35*/)
	Key6            Key = ( /*line :133:24*/_Ciconst_GLFW_KEY_6 /*line :133:35*/)
	Key7            Key = ( /*line :134:24*/_Ciconst_GLFW_KEY_7 /*line :134:35*/)
	Key8            Key = ( /*line :135:24*/_Ciconst_GLFW_KEY_8 /*line :135:35*/)
	Key9            Key = ( /*line :136:24*/_Ciconst_GLFW_KEY_9 /*line :136:35*/)
	KeySemicolon    Key = ( /*line :137:24*/_Ciconst_GLFW_KEY_SEMICOLON /*line :137:43*/)
	KeyEqual        Key = ( /*line :138:24*/_Ciconst_GLFW_KEY_EQUAL /*line :138:39*/)
	KeyA            Key = ( /*line :139:24*/_Ciconst_GLFW_KEY_A /*line :139:35*/)
	KeyB            Key = ( /*line :140:24*/_Ciconst_GLFW_KEY_B /*line :140:35*/)
	KeyC            Key = ( /*line :141:24*/_Ciconst_GLFW_KEY_C /*line :141:35*/)
	KeyD            Key = ( /*line :142:24*/_Ciconst_GLFW_KEY_D /*line :142:35*/)
	KeyE            Key = ( /*line :143:24*/_Ciconst_GLFW_KEY_E /*line :143:35*/)
	KeyF            Key = ( /*line :144:24*/_Ciconst_GLFW_KEY_F /*line :144:35*/)
	KeyG            Key = ( /*line :145:24*/_Ciconst_GLFW_KEY_G /*line :145:35*/)
	KeyH            Key = ( /*line :146:24*/_Ciconst_GLFW_KEY_H /*line :146:35*/)
	KeyI            Key = ( /*line :147:24*/_Ciconst_GLFW_KEY_I /*line :147:35*/)
	KeyJ            Key = ( /*line :148:24*/_Ciconst_GLFW_KEY_J /*line :148:35*/)
	KeyK            Key = ( /*line :149:24*/_Ciconst_GLFW_KEY_K /*line :149:35*/)
	KeyL            Key = ( /*line :150:24*/_Ciconst_GLFW_KEY_L /*line :150:35*/)
	KeyM            Key = ( /*line :151:24*/_Ciconst_GLFW_KEY_M /*line :151:35*/)
	KeyN            Key = ( /*line :152:24*/_Ciconst_GLFW_KEY_N /*line :152:35*/)
	KeyO            Key = ( /*line :153:24*/_Ciconst_GLFW_KEY_O /*line :153:35*/)
	KeyP            Key = ( /*line :154:24*/_Ciconst_GLFW_KEY_P /*line :154:35*/)
	KeyQ            Key = ( /*line :155:24*/_Ciconst_GLFW_KEY_Q /*line :155:35*/)
	KeyR            Key = ( /*line :156:24*/_Ciconst_GLFW_KEY_R /*line :156:35*/)
	KeyS            Key = ( /*line :157:24*/_Ciconst_GLFW_KEY_S /*line :157:35*/)
	KeyT            Key = ( /*line :158:24*/_Ciconst_GLFW_KEY_T /*line :158:35*/)
	KeyU            Key = ( /*line :159:24*/_Ciconst_GLFW_KEY_U /*line :159:35*/)
	KeyV            Key = ( /*line :160:24*/_Ciconst_GLFW_KEY_V /*line :160:35*/)
	KeyW            Key = ( /*line :161:24*/_Ciconst_GLFW_KEY_W /*line :161:35*/)
	KeyX            Key = ( /*line :162:24*/_Ciconst_GLFW_KEY_X /*line :162:35*/)
	KeyY            Key = ( /*line :163:24*/_Ciconst_GLFW_KEY_Y /*line :163:35*/)
	KeyZ            Key = ( /*line :164:24*/_Ciconst_GLFW_KEY_Z /*line :164:35*/)
	KeyLeftBracket  Key = ( /*line :165:24*/_Ciconst_GLFW_KEY_LEFT_BRACKET /*line :165:46*/)
	KeyBackslash    Key = ( /*line :166:24*/_Ciconst_GLFW_KEY_BACKSLASH /*line :166:43*/)
	KeyRightBracket Key = ( /*line :167:24*/_Ciconst_GLFW_KEY_RIGHT_BRACKET /*line :167:47*/)
	KeyGraveAccent  Key = ( /*line :168:24*/_Ciconst_GLFW_KEY_GRAVE_ACCENT /*line :168:46*/)
	KeyWorld1       Key = ( /*line :169:24*/_Ciconst_GLFW_KEY_WORLD_1 /*line :169:41*/)
	KeyWorld2       Key = ( /*line :170:24*/_Ciconst_GLFW_KEY_WORLD_2 /*line :170:41*/)
	KeyEscape       Key = ( /*line :171:24*/_Ciconst_GLFW_KEY_ESCAPE /*line :171:40*/)
	KeyEnter        Key = ( /*line :172:24*/_Ciconst_GLFW_KEY_ENTER /*line :172:39*/)
	KeyTab          Key = ( /*line :173:24*/_Ciconst_GLFW_KEY_TAB /*line :173:37*/)
	KeyBackspace    Key = ( /*line :174:24*/_Ciconst_GLFW_KEY_BACKSPACE /*line :174:43*/)
	KeyInsert       Key = ( /*line :175:24*/_Ciconst_GLFW_KEY_INSERT /*line :175:40*/)
	KeyDelete       Key = ( /*line :176:24*/_Ciconst_GLFW_KEY_DELETE /*line :176:40*/)
	KeyRight        Key = ( /*line :177:24*/_Ciconst_GLFW_KEY_RIGHT /*line :177:39*/)
	KeyLeft         Key = ( /*line :178:24*/_Ciconst_GLFW_KEY_LEFT /*line :178:38*/)
	KeyDown         Key = ( /*line :179:24*/_Ciconst_GLFW_KEY_DOWN /*line :179:38*/)
	KeyUp           Key = ( /*line :180:24*/_Ciconst_GLFW_KEY_UP /*line :180:36*/)
	KeyPageUp       Key = ( /*line :181:24*/_Ciconst_GLFW_KEY_PAGE_UP /*line :181:41*/)
	KeyPageDown     Key = ( /*line :182:24*/_Ciconst_GLFW_KEY_PAGE_DOWN /*line :182:43*/)
	KeyHome         Key = ( /*line :183:24*/_Ciconst_GLFW_KEY_HOME /*line :183:38*/)
	KeyEnd          Key = ( /*line :184:24*/_Ciconst_GLFW_KEY_END /*line :184:37*/)
	KeyCapsLock     Key = ( /*line :185:24*/_Ciconst_GLFW_KEY_CAPS_LOCK /*line :185:43*/)
	KeyScrollLock   Key = ( /*line :186:24*/_Ciconst_GLFW_KEY_SCROLL_LOCK /*line :186:45*/)
	KeyNumLock      Key = ( /*line :187:24*/_Ciconst_GLFW_KEY_NUM_LOCK /*line :187:42*/)
	KeyPrintScreen  Key = ( /*line :188:24*/_Ciconst_GLFW_KEY_PRINT_SCREEN /*line :188:46*/)
	KeyPause        Key = ( /*line :189:24*/_Ciconst_GLFW_KEY_PAUSE /*line :189:39*/)
	KeyF1           Key = ( /*line :190:24*/_Ciconst_GLFW_KEY_F1 /*line :190:36*/)
	KeyF2           Key = ( /*line :191:24*/_Ciconst_GLFW_KEY_F2 /*line :191:36*/)
	KeyF3           Key = ( /*line :192:24*/_Ciconst_GLFW_KEY_F3 /*line :192:36*/)
	KeyF4           Key = ( /*line :193:24*/_Ciconst_GLFW_KEY_F4 /*line :193:36*/)
	KeyF5           Key = ( /*line :194:24*/_Ciconst_GLFW_KEY_F5 /*line :194:36*/)
	KeyF6           Key = ( /*line :195:24*/_Ciconst_GLFW_KEY_F6 /*line :195:36*/)
	KeyF7           Key = ( /*line :196:24*/_Ciconst_GLFW_KEY_F7 /*line :196:36*/)
	KeyF8           Key = ( /*line :197:24*/_Ciconst_GLFW_KEY_F8 /*line :197:36*/)
	KeyF9           Key = ( /*line :198:24*/_Ciconst_GLFW_KEY_F9 /*line :198:36*/)
	KeyF10          Key = ( /*line :199:24*/_Ciconst_GLFW_KEY_F10 /*line :199:37*/)
	KeyF11          Key = ( /*line :200:24*/_Ciconst_GLFW_KEY_F11 /*line :200:37*/)
	KeyF12          Key = ( /*line :201:24*/_Ciconst_GLFW_KEY_F12 /*line :201:37*/)
	KeyF13          Key = ( /*line :202:24*/_Ciconst_GLFW_KEY_F13 /*line :202:37*/)
	KeyF14          Key = ( /*line :203:24*/_Ciconst_GLFW_KEY_F14 /*line :203:37*/)
	KeyF15          Key = ( /*line :204:24*/_Ciconst_GLFW_KEY_F15 /*line :204:37*/)
	KeyF16          Key = ( /*line :205:24*/_Ciconst_GLFW_KEY_F16 /*line :205:37*/)
	KeyF17          Key = ( /*line :206:24*/_Ciconst_GLFW_KEY_F17 /*line :206:37*/)
	KeyF18          Key = ( /*line :207:24*/_Ciconst_GLFW_KEY_F18 /*line :207:37*/)
	KeyF19          Key = ( /*line :208:24*/_Ciconst_GLFW_KEY_F19 /*line :208:37*/)
	KeyF20          Key = ( /*line :209:24*/_Ciconst_GLFW_KEY_F20 /*line :209:37*/)
	KeyF21          Key = ( /*line :210:24*/_Ciconst_GLFW_KEY_F21 /*line :210:37*/)
	KeyF22          Key = ( /*line :211:24*/_Ciconst_GLFW_KEY_F22 /*line :211:37*/)
	KeyF23          Key = ( /*line :212:24*/_Ciconst_GLFW_KEY_F23 /*line :212:37*/)
	KeyF24          Key = ( /*line :213:24*/_Ciconst_GLFW_KEY_F24 /*line :213:37*/)
	KeyF25          Key = ( /*line :214:24*/_Ciconst_GLFW_KEY_F25 /*line :214:37*/)
	KeyKP0          Key = ( /*line :215:24*/_Ciconst_GLFW_KEY_KP_0 /*line :215:38*/)
	KeyKP1          Key = ( /*line :216:24*/_Ciconst_GLFW_KEY_KP_1 /*line :216:38*/)
	KeyKP2          Key = ( /*line :217:24*/_Ciconst_GLFW_KEY_KP_2 /*line :217:38*/)
	KeyKP3          Key = ( /*line :218:24*/_Ciconst_GLFW_KEY_KP_3 /*line :218:38*/)
	KeyKP4          Key = ( /*line :219:24*/_Ciconst_GLFW_KEY_KP_4 /*line :219:38*/)
	KeyKP5          Key = ( /*line :220:24*/_Ciconst_GLFW_KEY_KP_5 /*line :220:38*/)
	KeyKP6          Key = ( /*line :221:24*/_Ciconst_GLFW_KEY_KP_6 /*line :221:38*/)
	KeyKP7          Key = ( /*line :222:24*/_Ciconst_GLFW_KEY_KP_7 /*line :222:38*/)
	KeyKP8          Key = ( /*line :223:24*/_Ciconst_GLFW_KEY_KP_8 /*line :223:38*/)
	KeyKP9          Key = ( /*line :224:24*/_Ciconst_GLFW_KEY_KP_9 /*line :224:38*/)
	KeyKPDecimal    Key = ( /*line :225:24*/_Ciconst_GLFW_KEY_KP_DECIMAL /*line :225:44*/)
	KeyKPDivide     Key = ( /*line :226:24*/_Ciconst_GLFW_KEY_KP_DIVIDE /*line :226:43*/)
	KeyKPMultiply   Key = ( /*line :227:24*/_Ciconst_GLFW_KEY_KP_MULTIPLY /*line :227:45*/)
	KeyKPSubtract   Key = ( /*line :228:24*/_Ciconst_GLFW_KEY_KP_SUBTRACT /*line :228:45*/)
	KeyKPAdd        Key = ( /*line :229:24*/_Ciconst_GLFW_KEY_KP_ADD /*line :229:40*/)
	KeyKPEnter      Key = ( /*line :230:24*/_Ciconst_GLFW_KEY_KP_ENTER /*line :230:42*/)
	KeyKPEqual      Key = ( /*line :231:24*/_Ciconst_GLFW_KEY_KP_EQUAL /*line :231:42*/)
	KeyLeftShift    Key = ( /*line :232:24*/_Ciconst_GLFW_KEY_LEFT_SHIFT /*line :232:44*/)
	KeyLeftControl  Key = ( /*line :233:24*/_Ciconst_GLFW_KEY_LEFT_CONTROL /*line :233:46*/)
	KeyLeftAlt      Key = ( /*line :234:24*/_Ciconst_GLFW_KEY_LEFT_ALT /*line :234:42*/)
	KeyLeftSuper    Key = ( /*line :235:24*/_Ciconst_GLFW_KEY_LEFT_SUPER /*line :235:44*/)
	KeyRightShift   Key = ( /*line :236:24*/_Ciconst_GLFW_KEY_RIGHT_SHIFT /*line :236:45*/)
	KeyRightControl Key = ( /*line :237:24*/_Ciconst_GLFW_KEY_RIGHT_CONTROL /*line :237:47*/)
	KeyRightAlt     Key = ( /*line :238:24*/_Ciconst_GLFW_KEY_RIGHT_ALT /*line :238:43*/)
	KeyRightSuper   Key = ( /*line :239:24*/_Ciconst_GLFW_KEY_RIGHT_SUPER /*line :239:45*/)
	KeyMenu         Key = ( /*line :240:24*/_Ciconst_GLFW_KEY_MENU /*line :240:38*/)
	KeyLast         Key = ( /*line :241:24*/_Ciconst_GLFW_KEY_LAST /*line :241:38*/)
)

// ModifierKey corresponds to a modifier key.
type ModifierKey int

// Modifier keys.
const (
	ModShift    ModifierKey = ( /*line :249:28*/_Ciconst_GLFW_MOD_SHIFT /*line :249:43*/)
	ModControl  ModifierKey = ( /*line :250:28*/_Ciconst_GLFW_MOD_CONTROL /*line :250:45*/)
	ModAlt      ModifierKey = ( /*line :251:28*/_Ciconst_GLFW_MOD_ALT /*line :251:41*/)
	ModSuper    ModifierKey = ( /*line :252:28*/_Ciconst_GLFW_MOD_SUPER /*line :252:43*/)
	ModCapsLock ModifierKey = ( /*line :253:28*/_Ciconst_GLFW_MOD_CAPS_LOCK /*line :253:47*/)
	ModNumLock  ModifierKey = ( /*line :254:28*/_Ciconst_GLFW_MOD_NUM_LOCK /*line :254:46*/)
)

// MouseButton corresponds to a mouse button.
type MouseButton int

// Mouse buttons.
const (
	MouseButton1      MouseButton = ( /*line :262:34*/_Ciconst_GLFW_MOUSE_BUTTON_1 /*line :262:54*/)
	MouseButton2      MouseButton = ( /*line :263:34*/_Ciconst_GLFW_MOUSE_BUTTON_2 /*line :263:54*/)
	MouseButton3      MouseButton = ( /*line :264:34*/_Ciconst_GLFW_MOUSE_BUTTON_3 /*line :264:54*/)
	MouseButton4      MouseButton = ( /*line :265:34*/_Ciconst_GLFW_MOUSE_BUTTON_4 /*line :265:54*/)
	MouseButton5      MouseButton = ( /*line :266:34*/_Ciconst_GLFW_MOUSE_BUTTON_5 /*line :266:54*/)
	MouseButton6      MouseButton = ( /*line :267:34*/_Ciconst_GLFW_MOUSE_BUTTON_6 /*line :267:54*/)
	MouseButton7      MouseButton = ( /*line :268:34*/_Ciconst_GLFW_MOUSE_BUTTON_7 /*line :268:54*/)
	MouseButton8      MouseButton = ( /*line :269:34*/_Ciconst_GLFW_MOUSE_BUTTON_8 /*line :269:54*/)
	MouseButtonLast   MouseButton = ( /*line :270:34*/_Ciconst_GLFW_MOUSE_BUTTON_LAST /*line :270:57*/)
	MouseButtonLeft   MouseButton = ( /*line :271:34*/_Ciconst_GLFW_MOUSE_BUTTON_LEFT /*line :271:57*/)
	MouseButtonRight  MouseButton = ( /*line :272:34*/_Ciconst_GLFW_MOUSE_BUTTON_RIGHT /*line :272:58*/)
	MouseButtonMiddle MouseButton = ( /*line :273:34*/_Ciconst_GLFW_MOUSE_BUTTON_MIDDLE /*line :273:59*/)
)

// StandardCursor corresponds to a standard cursor icon.
type StandardCursor int

// Standard cursors
const (
	ArrowCursor     StandardCursor = ( /*line :281:35*/_Ciconst_GLFW_ARROW_CURSOR /*line :281:53*/)
	IBeamCursor     StandardCursor = ( /*line :282:35*/_Ciconst_GLFW_IBEAM_CURSOR /*line :282:53*/)
	CrosshairCursor StandardCursor = ( /*line :283:35*/_Ciconst_GLFW_CROSSHAIR_CURSOR /*line :283:57*/)
	HandCursor      StandardCursor = ( /*line :284:35*/_Ciconst_GLFW_HAND_CURSOR /*line :284:52*/)
	HResizeCursor   StandardCursor = ( /*line :285:35*/_Ciconst_GLFW_HRESIZE_CURSOR /*line :285:55*/)
	VResizeCursor   StandardCursor = ( /*line :286:35*/_Ciconst_GLFW_VRESIZE_CURSOR /*line :286:55*/)
)

// Action corresponds to a key or button action.
type Action int

// Action types.
const (
	Release Action = ( /*line :294:19*/_Ciconst_GLFW_RELEASE /*line :294:32*/) // The key or button was released.
	Press   Action = ( /*line :295:19*/_Ciconst_GLFW_PRESS /*line :295:30*/)   // The key or button was pressed.
	Repeat  Action = ( /*line :296:19*/_Ciconst_GLFW_REPEAT /*line :296:31*/)  // The key was held down until it repeated.
)

// InputMode corresponds to an input mode.
type InputMode int

// Input modes.
const (
	CursorMode             InputMode = ( /*line :304:37*/_Ciconst_GLFW_CURSOR /*line :304:49*/)               // See Cursor mode values
	StickyKeysMode         InputMode = ( /*line :305:37*/_Ciconst_GLFW_STICKY_KEYS /*line :305:54*/)          // Value can be either 1 or 0
	StickyMouseButtonsMode InputMode = ( /*line :306:37*/_Ciconst_GLFW_STICKY_MOUSE_BUTTONS /*line :306:63*/) // Value can be either 1 or 0
	LockKeyMods            InputMode = ( /*line :307:37*/_Ciconst_GLFW_LOCK_KEY_MODS /*line :307:56*/)        // Value can be either 1 or 0
	RawMouseMotion         InputMode = ( /*line :308:37*/_Ciconst_GLFW_RAW_MOUSE_MOTION /*line :308:59*/)     // Value can be either 1 or 0
)

// Cursor mode values.
const (
	CursorNormal   int = ( /*line :313:23*/_Ciconst_GLFW_CURSOR_NORMAL /*line :313:42*/)
	CursorHidden   int = ( /*line :314:23*/_Ciconst_GLFW_CURSOR_HIDDEN /*line :314:42*/)
	CursorDisabled int = ( /*line :315:23*/_Ciconst_GLFW_CURSOR_DISABLED /*line :315:44*/)
)

// Cursor represents a cursor.
type Cursor struct {
	data * /*line :320:8*/_Ctype_GLFWcursor /*line :320:20*/
}

var fJoystickHolder func(joy Joystick, event PeripheralEvent)

//export goJoystickCB
func goJoystickCB(joy, event  /*line :326:30*/_Ctype_int /*line :326:35*/) {
	fJoystickHolder(Joystick(joy), PeripheralEvent(event))
}

//export goMouseButtonCB
func goMouseButtonCB(window unsafe.Pointer, button, action, mods  /*line :331:66*/_Ctype_int /*line :331:71*/) {
	w := windows.get((* /*line :332:21*/_Ctype_GLFWwindow /*line :332:33*/)(window))
	w.fMouseButtonHolder(w, MouseButton(button), Action(action), ModifierKey(mods))
}

//export goCursorPosCB
func goCursorPosCB(window unsafe.Pointer, xpos, ypos  /*line :337:54*/_Ctype_double /*line :337:62*/) {
	w := windows.get((* /*line :338:21*/_Ctype_GLFWwindow /*line :338:33*/)(window))
	w.fCursorPosHolder(w, float64(xpos), float64(ypos))
}

//export goCursorEnterCB
func goCursorEnterCB(window unsafe.Pointer, entered  /*line :343:53*/_Ctype_int /*line :343:58*/) {
	w := windows.get((* /*line :344:21*/_Ctype_GLFWwindow /*line :344:33*/)(window))
	hasEntered := glfwbool(entered)
	w.fCursorEnterHolder(w, hasEntered)
}

//export goScrollCB
func goScrollCB(window unsafe.Pointer, xoff, yoff  /*line :350:51*/_Ctype_double /*line :350:59*/) {
	w := windows.get((* /*line :351:21*/_Ctype_GLFWwindow /*line :351:33*/)(window))
	w.fScrollHolder(w, float64(xoff), float64(yoff))
}

//export goKeyCB
func goKeyCB(window unsafe.Pointer, key, scancode, action, mods  /*line :356:65*/_Ctype_int /*line :356:70*/) {
	w := windows.get((* /*line :357:21*/_Ctype_GLFWwindow /*line :357:33*/)(window))
	w.fKeyHolder(w, Key(key), int(scancode), Action(action), ModifierKey(mods))
}

//export goCharCB
func goCharCB(window unsafe.Pointer, character  /*line :362:48*/_Ctype_uint /*line :362:54*/) {
	w := windows.get((* /*line :363:21*/_Ctype_GLFWwindow /*line :363:33*/)(window))
	w.fCharHolder(w, rune(character))
}

//export goCharModsCB
func goCharModsCB(window unsafe.Pointer, character  /*line :368:52*/_Ctype_uint /*line :368:58*/, mods  /*line :368:65*/_Ctype_int /*line :368:70*/) {
	w := windows.get((* /*line :369:21*/_Ctype_GLFWwindow /*line :369:33*/)(window))
	w.fCharModsHolder(w, rune(character), ModifierKey(mods))
}

//export goDropCB
func goDropCB(window unsafe.Pointer, count  /*line :374:44*/_Ctype_int /*line :374:49*/, names ** /*line :374:59*/_Ctype_char /*line :374:65*/) { // TODO: The types of name can be `**C.char` or `unsafe.Pointer`, use whichever is better.
	w := windows.get((* /*line :375:21*/_Ctype_GLFWwindow /*line :375:33*/)(window))
	namesSlice := make([]string, int(count)) // TODO: Make this better. This part is unfinished, hacky, probably not correct, and not idiomatic.
	for i := 0; i < int(count); i++ {        // TODO: Make this better. It should be cleaned up and vetted.
		var x * /*line :378:10*/_Ctype_char /*line :378:16*/                                                                                 // TODO: Make this better.
		p := (** /*line :379:11*/_Ctype_char /*line :379:17*/)(unsafe.Pointer(uintptr(unsafe.Pointer(names)) + uintptr(i)*unsafe.Sizeof(x))) // TODO: Make this better.
		namesSlice[i] = ( /*line :380:19*/_Cfunc_GoString /*line :380:28*/)(*p)                                                                // TODO: Make this better.
	}
	w.fDropHolder(w, namesSlice)
}

// GetInputMode returns the value of an input option of the window.
func (w *Window) GetInputMode(mode InputMode) int {
	ret := int(func() _Ctype_int{ _cgo0 := /*line :387:32*/w.data; var _cgo1 _Ctype_int = _Ctype_int /*line :387:45*/(mode); _cgoCheckPointer(_cgo0, nil); return /*line :387:52*/_Cfunc_glfwGetInputMode(_cgo0, _cgo1); }())
	panicError()
	return ret
}

// SetInputMode sets an input option for the window.
func (w *Window) SetInputMode(mode InputMode, value int) {
	func() { _cgo0 := /*line :394:21*/w.data; var _cgo1 _Ctype_int = _Ctype_int /*line :394:34*/(mode); var _cgo2 _Ctype_int = _Ctype_int /*line :394:47*/(value); _cgoCheckPointer(_cgo0, nil); /*line :394:55*/_Cfunc_glfwSetInputMode(_cgo0, _cgo1, _cgo2); }()
	panicError()
}

// RawMouseMotionSupported returns whether raw mouse motion is supported on the
// current system. This status does not change after GLFW has been initialized
// so you only need to check this once. If you attempt to enable raw motion on
// a system that does not support it, PlatformError will be emitted.
//
// Raw mouse motion is closer to the actual motion of the mouse across a
// surface. It is not affected by the scaling and acceleration applied to the
// motion of the desktop cursor. That processing is suitable for a cursor while
// raw motion is better for controlling for example a 3D camera. Because of
// this, raw mouse motion is only provided when the cursor is disabled.
//
// This function must only be called from the main thread.
func RawMouseMotionSupported() bool {
	return int(( /*line :411:13*/_Cfunc_glfwRawMouseMotionSupported /*line :411:41*/)()) == True
}

// GetKeyScancode function returns the platform-specific scancode of the
// specified key.
//
// If the key is KeyUnknown or does not exist on the keyboard this method will
// return -1.
func GetKeyScancode(key Key) int {
	return int(( /*line :420:13*/_Cfunc_glfwGetKeyScancode /*line :420:32*/)( /*line :420:34*/_Ctype_int /*line :420:39*/(key)))
}

// GetKey returns the last reported state of a keyboard key. The returned state
// is one of Press or Release. The higher-level state Repeat is only reported to
// the key callback.
//
// If the StickyKeys input mode is enabled, this function returns Press the first
// time you call this function after a key has been pressed, even if the key has
// already been released.
//
// The key functions deal with physical keys, with key tokens named after their
// use on the standard US keyboard layout. If you want to input text, use the
// Unicode character callback instead.
func (w *Window) GetKey(key Key) Action {
	ret := Action(func() _Ctype_int{ _cgo0 := /*line :435:29*/w.data; var _cgo1 _Ctype_int = _Ctype_int /*line :435:42*/(key); _cgoCheckPointer(_cgo0, nil); return /*line :435:48*/_Cfunc_glfwGetKey(_cgo0, _cgo1); }())
	panicError()
	return ret
}

// GetKeyName returns the localized name of the specified printable key.
//
// If the key is glfw.KeyUnknown, the scancode is used, otherwise the scancode is ignored.
func GetKeyName(key Key, scancode int) string {
	ret := ( /*line :444:9*/_Cfunc_glfwGetKeyName /*line :444:24*/)( /*line :444:26*/_Ctype_int /*line :444:31*/(key),  /*line :444:38*/_Ctype_int /*line :444:43*/(scancode))
	panicError()
	return ( /*line :446:9*/_Cfunc_GoString /*line :446:18*/)(ret)
}

// GetMouseButton returns the last state reported for the specified mouse button.
//
// If the StickyMouseButtons input mode is enabled, this function returns Press
// the first time you call this function after a mouse button has been pressed,
// even if the mouse button has already been released.
func (w *Window) GetMouseButton(button MouseButton) Action {
	ret := Action(func() _Ctype_int{ _cgo0 := /*line :455:37*/w.data; var _cgo1 _Ctype_int = _Ctype_int /*line :455:50*/(button); _cgoCheckPointer(_cgo0, nil); return /*line :455:59*/_Cfunc_glfwGetMouseButton(_cgo0, _cgo1); }())
	panicError()
	return ret
}

// GetCursorPos returns the last reported position of the cursor.
//
// If the cursor is disabled (with CursorDisabled) then the cursor position is
// unbounded and limited only by the minimum and maximum values of a double.
//
// The coordinate can be converted to their integer equivalents with the floor
// function. Casting directly to an integer type works for positive coordinates,
// but fails for negative ones.
func (w *Window) GetCursorPos() (x, y float64) {
	var xpos, ypos  /*line :469:17*/_Ctype_double /*line :469:25*/
	func() { _cgo0 := /*line :470:21*/w.data; var _cgo1 *_Ctype_double = /*line :470:29*/&xpos; var _cgo2 *_Ctype_double = /*line :470:36*/&ypos; _cgoCheckPointer(_cgo0, nil); /*line :470:42*/_Cfunc_glfwGetCursorPos(_cgo0, _cgo1, _cgo2); }()
	panicError()
	return float64(xpos), float64(ypos)
}

// SetCursorPos sets the position of the cursor. The specified window must
// be focused. If the window does not have focus when this function is called,
// it fails silently.
//
// If the cursor is disabled (with CursorDisabled) then the cursor position is
// unbounded and limited only by the minimum and maximum values of a double.
func (w *Window) SetCursorPos(xpos, ypos float64) {
	func() { _cgo0 := /*line :482:21*/w.data; var _cgo1 _Ctype_double = _Ctype_double /*line :482:37*/(xpos); var _cgo2 _Ctype_double = _Ctype_double /*line :482:53*/(ypos); _cgoCheckPointer(_cgo0, nil); /*line :482:60*/_Cfunc_glfwSetCursorPos(_cgo0, _cgo1, _cgo2); }()
	panicError()
}

// CreateCursor creates a new custom cursor image that can be set for a window with SetCursor.
// The cursor can be destroyed with Destroy. Any remaining cursors are destroyed by Terminate.
//
// The image is ideally provided in the form of *image.NRGBA.
// The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight
// bits per channel with the red channel first. They are arranged canonically
// as packed sequential rows, starting from the top-left corner. If the image
// type is not *image.NRGBA, it will be converted to it.
//
// The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image.
// Like all other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.
func CreateCursor(img image.Image, xhot, yhot int) *Cursor {
	imgC, free := imageToGLFW(img)

	c := func() *_Ctype_struct_GLFWcursor{ _cgoBase0 := /*line :500:26*/&imgC; _cgo0 := _cgoBase0; var _cgo1 _Ctype_int = _Ctype_int /*line :500:38*/(xhot); var _cgo2 _Ctype_int = _Ctype_int /*line :500:51*/(yhot); _cgoCheckPointer(_cgoBase0, 0 == 0); return /*line :500:58*/_Cfunc_glfwCreateCursor(_cgo0, _cgo1, _cgo2); }()

	free()
	panicError()

	return &Cursor{c}
}

// CreateStandardCursor returns a cursor with a standard shape,
// that can be set for a window with SetCursor.
func CreateStandardCursor(shape StandardCursor) *Cursor {
	c := ( /*line :511:7*/_Cfunc_glfwCreateStandardCursor /*line :511:32*/)( /*line :511:34*/_Ctype_int /*line :511:39*/(shape))
	panicError()
	return &Cursor{c}
}

// Destroy destroys a cursor previously created with CreateCursor.
// Any remaining cursors will be destroyed by Terminate.
func (c *Cursor) Destroy() {
	func() { _cgo0 := /*line :519:22*/c.data; _cgoCheckPointer(_cgo0, nil); /*line :519:29*/_Cfunc_glfwDestroyCursor(_cgo0); }()
	panicError()
}

// SetCursor sets the cursor image to be used when the cursor is over the client area
// of the specified window. The set cursor will only be visible when the cursor mode of the
// window is CursorNormal.
//
// On some platforms, the set cursor may not be visible unless the window also has input focus.
func (w *Window) SetCursor(c *Cursor) {
	if c == nil {
		func() { _cgo0 := /*line :530:19*/w.data; var _cgo1 *_Ctype_struct_GLFWcursor = /*line :530:27*/nil; _cgoCheckPointer(_cgo0, nil); /*line :530:31*/_Cfunc_glfwSetCursor(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :532:19*/w.data; _cgo1 := /*line :532:27*/c.data; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :532:34*/_Cfunc_glfwSetCursor(_cgo0, _cgo1); }()
	}
	panicError()
}

// JoystickCallback is the joystick configuration callback.
type JoystickCallback func(joy Joystick, event PeripheralEvent)

// SetJoystickCallback sets the joystick configuration callback, or removes the
// currently set callback. This is called when a joystick is connected to or
// disconnected from the system.
func SetJoystickCallback(cbfun JoystickCallback) (previous JoystickCallback) {
	previous = fJoystickHolder
	fJoystickHolder = cbfun
	if cbfun == nil {
		( /*line :547:3*/_Cfunc_glfwSetJoystickCallback /*line :547:27*/)(nil)
	} else {
		( /*line :549:3*/_Cfunc_glfwSetJoystickCallbackCB /*line :549:29*/)()
	}
	panicError()
	return previous
}

// KeyCallback is the key callback.
type KeyCallback func(w *Window, key Key, scancode int, action Action, mods ModifierKey)

// SetKeyCallback sets the key callback which is called when a key is pressed,
// repeated or released.
//
// The key functions deal with physical keys, with layout independent key tokens
// named after their values in the standard US keyboard layout. If you want to
// input text, use the SetCharCallback instead.
//
// When a window loses focus, it will generate synthetic key release events for
// all pressed keys. You can tell these events from user-generated events by the
// fact that the synthetic ones are generated after the window has lost focus,
// i.e. Focused will be false and the focus callback will have already been
// called.
func (w *Window) SetKeyCallback(cbfun KeyCallback) (previous KeyCallback) {
	previous = w.fKeyHolder
	w.fKeyHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWkeyfun{ _cgo0 := /*line :574:24*/w.data; var _cgo1 *[0]byte = /*line :574:32*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :574:36*/_Cfunc_glfwSetKeyCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :576:26*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :576:33*/_Cfunc_glfwSetKeyCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// CharCallback is the character callback.
type CharCallback func(w *Window, char rune)

// SetCharCallback sets the character callback which is called when a
// Unicode character is input.
//
// The character callback is intended for Unicode text input. As it deals with
// characters, it is keyboard layout dependent, whereas the
// key callback is not. Characters do not map 1:1
// to physical keys, as a key may produce zero, one or more characters. If you
// want to know whether a specific physical key was pressed or released, see
// the key callback instead.
//
// The character callback behaves as system text input normally does and will
// not be called if modifier keys are held down that would prevent normal text
// input on that platform, for example a Super (Command) key on OS X or Alt key
// on Windows. There is a character with modifiers callback that receives these events.
func (w *Window) SetCharCallback(cbfun CharCallback) (previous CharCallback) {
	previous = w.fCharHolder
	w.fCharHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWcharfun{ _cgo0 := /*line :603:25*/w.data; var _cgo1 *[0]byte = /*line :603:33*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :603:37*/_Cfunc_glfwSetCharCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :605:27*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :605:34*/_Cfunc_glfwSetCharCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// CharModsCallback is the character with modifiers callback.
type CharModsCallback func(w *Window, char rune, mods ModifierKey)

// SetCharModsCallback sets the character with modifiers callback which is called when a
// Unicode character is input regardless of what modifier keys are used.
//
// Deprecated: Scheduled for removal in version 4.0.
//
// The character with modifiers callback is intended for implementing custom
// Unicode character input. For regular Unicode text input, see the
// character callback. Like the character callback, the character with modifiers callback
// deals with characters and is keyboard layout dependent. Characters do not
// map 1:1 to physical keys, as a key may produce zero, one or more characters.
// If you want to know whether a specific physical key was pressed or released,
// see the key callback instead.
func (w *Window) SetCharModsCallback(cbfun CharModsCallback) (previous CharModsCallback) {
	previous = w.fCharModsHolder
	w.fCharModsHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWcharmodsfun{ _cgo0 := /*line :630:29*/w.data; var _cgo1 *[0]byte = /*line :630:37*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :630:41*/_Cfunc_glfwSetCharModsCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :632:31*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :632:38*/_Cfunc_glfwSetCharModsCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// MouseButtonCallback is the mouse button callback.
type MouseButtonCallback func(w *Window, button MouseButton, action Action, mods ModifierKey)

// SetMouseButtonCallback sets the mouse button callback which is called when a
// mouse button is pressed or released.
//
// When a window loses focus, it will generate synthetic mouse button release
// events for all pressed mouse buttons. You can tell these events from
// user-generated events by the fact that the synthetic ones are generated after
// the window has lost focus, i.e. Focused will be false and the focus
// callback will have already been called.
func (w *Window) SetMouseButtonCallback(cbfun MouseButtonCallback) (previous MouseButtonCallback) {
	previous = w.fMouseButtonHolder
	w.fMouseButtonHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWmousebuttonfun{ _cgo0 := /*line :653:32*/w.data; var _cgo1 *[0]byte = /*line :653:40*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :653:44*/_Cfunc_glfwSetMouseButtonCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :655:34*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :655:41*/_Cfunc_glfwSetMouseButtonCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// CursorPosCallback the cursor position callback.
type CursorPosCallback func(w *Window, xpos float64, ypos float64)

// SetCursorPosCallback sets the cursor position callback which is called
// when the cursor is moved. The callback is provided with the position relative
// to the upper-left corner of the client area of the window.
func (w *Window) SetCursorPosCallback(cbfun CursorPosCallback) (previous CursorPosCallback) {
	previous = w.fCursorPosHolder
	w.fCursorPosHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWcursorposfun{ _cgo0 := /*line :671:30*/w.data; var _cgo1 *[0]byte = /*line :671:38*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :671:42*/_Cfunc_glfwSetCursorPosCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :673:32*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :673:39*/_Cfunc_glfwSetCursorPosCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// CursorEnterCallback is the cursor boundary crossing callback.
type CursorEnterCallback func(w *Window, entered bool)

// SetCursorEnterCallback the cursor boundary crossing callback which is called
// when the cursor enters or leaves the client area of the window.
func (w *Window) SetCursorEnterCallback(cbfun CursorEnterCallback) (previous CursorEnterCallback) {
	previous = w.fCursorEnterHolder
	w.fCursorEnterHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWcursorenterfun{ _cgo0 := /*line :688:32*/w.data; var _cgo1 *[0]byte = /*line :688:40*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :688:44*/_Cfunc_glfwSetCursorEnterCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :690:34*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :690:41*/_Cfunc_glfwSetCursorEnterCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// ScrollCallback is the scroll callback.
type ScrollCallback func(w *Window, xoff float64, yoff float64)

// SetScrollCallback sets the scroll callback which is called when a scrolling
// device is used, such as a mouse wheel or scrolling area of a touchpad.
func (w *Window) SetScrollCallback(cbfun ScrollCallback) (previous ScrollCallback) {
	previous = w.fScrollHolder
	w.fScrollHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWscrollfun{ _cgo0 := /*line :705:27*/w.data; var _cgo1 *[0]byte = /*line :705:35*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :705:39*/_Cfunc_glfwSetScrollCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :707:29*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :707:36*/_Cfunc_glfwSetScrollCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// DropCallback is the drop callback.
type DropCallback func(w *Window, names []string)

// SetDropCallback sets the drop callback which is called when an object
// is dropped over the window.
func (w *Window) SetDropCallback(cbfun DropCallback) (previous DropCallback) {
	previous = w.fDropHolder
	w.fDropHolder = cbfun
	if cbfun == nil {
		func() _Ctype_GLFWdropfun{ _cgo0 := /*line :722:25*/w.data; var _cgo1 *[0]byte = /*line :722:33*/nil; _cgoCheckPointer(_cgo0, nil); return /*line :722:37*/_Cfunc_glfwSetDropCallback(_cgo0, _cgo1); }()
	} else {
		func() { _cgo0 := /*line :724:27*/w.data; _cgoCheckPointer(_cgo0, nil); /*line :724:34*/_Cfunc_glfwSetDropCallbackCB(_cgo0); }()
	}
	panicError()
	return previous
}

// Present returns whether the specified joystick is present.
//
// There is no need to call this function before other methods of Joystick type
// as they all check for presence before performing any other work.
//
// This function must only be called from the main thread.
func (joy Joystick) Present() bool {
	return glfwbool(( /*line :737:18*/_Cfunc_glfwJoystickPresent /*line :737:38*/)( /*line :737:40*/_Ctype_int /*line :737:45*/(joy)))
}

// GetAxes returns the values of all axes of the specified joystick. Each
// element in the array is a value between -1.0 and 1.0.
//
// If the specified joystick is not present this function will return nil but
// will not generate an error. This can be used instead of first calling
// Present.
//
// This function must only be called from the main thread.
func (joy Joystick) GetAxes() []float32 {
	var length int

	axis := ( /*line :751:10*/_Cfunc_glfwGetJoystickAxes /*line :751:30*/)( /*line :751:32*/_Ctype_int /*line :751:37*/(joy), (* /*line :751:46*/_Ctype_int /*line :751:51*/)(unsafe.Pointer(&length)))
	if axis == nil {
		return nil
	}

	a := make([]float32, length)
	for i := 0; i < length; i++ {
		a[i] = float32(( /*line :758:18*/_Cfunc_GetAxisAtIndex /*line :758:33*/)(axis,  /*line :758:41*/_Ctype_int /*line :758:46*/(i)))
	}
	return a
}

// GetButtons returns the state of all buttons of the specified joystick. Each
// element in the array is either Press or Release.
//
// For backward compatibility with earlier versions that did not have GetHats,
// the button array also includes all hats, each represented as four buttons.
// The hats are in the same order as returned by GetHats and are in the order
// up, right, down and left. To disable these extra buttons, set the
// JoystickHatButtons init hint before initialization.
//
// If the specified joystick is not present this function will return nil but
// will not generate an error. This can be used instead of first calling
// Present.
//
// This function must only be called from the main thread.
func (joy Joystick) GetButtons() []Action {
	var length int

	buttons := ( /*line :780:13*/_Cfunc_glfwGetJoystickButtons /*line :780:36*/)(
		 /*line :781:3*/_Ctype_int /*line :781:8*/(joy),
		(* /*line :782:5*/_Ctype_int /*line :782:10*/)(unsafe.Pointer(&length)),
	)
	if buttons == nil {
		return nil
	}

	b := make([]Action, length)
	for i := 0; i < length; i++ {
		b[i] = Action(( /*line :790:17*/_Cfunc_GetButtonsAtIndex /*line :790:35*/)(buttons,  /*line :790:46*/_Ctype_int /*line :790:51*/(i)))
	}
	return b
}

// GetHats returns the state of all hats of the specified joystick.
//
// If the specified joystick is not present this function will return nil but
// will not generate an error. This can be used instead of first calling
// Present.
//
// This function must only be called from the main thread.
func (joy Joystick) GetHats() []JoystickHatState {
	var length int

	hats := ( /*line :805:10*/_Cfunc_glfwGetJoystickHats /*line :805:30*/)( /*line :805:32*/_Ctype_int /*line :805:37*/(joy), (* /*line :805:46*/_Ctype_int /*line :805:51*/)(unsafe.Pointer(&length)))
	if hats == nil {
		return nil
	}

	b := make([]JoystickHatState, length)
	for i := 0; i < length; i++ {
		b[i] = JoystickHatState(( /*line :812:27*/_Cfunc_GetButtonsAtIndex /*line :812:45*/)(hats,  /*line :812:53*/_Ctype_int /*line :812:58*/(i)))
	}
	return b
}

// GetName returns the name, encoded as UTF-8, of the specified joystick.
//
// If the specified joystick is not present this function will return nil but
// will not generate an error. This can be used instead of first calling
// Present.
//
// This function must only be called from the main thread.
func (joy Joystick) GetName() string {
	jn := ( /*line :825:8*/_Cfunc_glfwGetJoystickName /*line :825:28*/)( /*line :825:30*/_Ctype_int /*line :825:35*/(joy))
	return ( /*line :826:9*/_Cfunc_GoString /*line :826:18*/)(jn)
}

// GetGUID returns the SDL compatible GUID, as a UTF-8 encoded
// hexadecimal string, of the specified joystick.
//
// The GUID is what connects a joystick to a gamepad mapping. A connected
// joystick will always have a GUID even if there is no gamepad mapping
// assigned to it.
//
// If the specified joystick is not present this function will return empty
// string but will not generate an error. This can be used instead of first
// calling JoystickPresent.
//
// The GUID uses the format introduced in SDL 2.0.5. This GUID tries to uniquely
// identify the make and model of a joystick but does not identify a specific
// unit, e.g. all wired Xbox 360 controllers will have the same GUID on that
// platform. The GUID for a unit may vary between platforms depending on what
// hardware information the platform specific APIs provide.
//
// This function must only be called from the main thread.
func (joy Joystick) GetGUID() string {
	guid := ( /*line :848:10*/_Cfunc_glfwGetJoystickGUID /*line :848:30*/)( /*line :848:32*/_Ctype_int /*line :848:37*/(joy))
	return ( /*line :849:9*/_Cfunc_GoString /*line :849:18*/)(guid)
}

// SetUserPointer sets the user-defined pointer of the joystick. The current value
// is retained until the joystick is disconnected. The initial value is nil.
//
// This function may be called from the joystick callback, even for a joystick
// that is being disconnected.
//
// This function may be called from any thread. Access is not synchronized.
func (joy Joystick) SetUserPointer(pointer unsafe.Pointer) {
	func() { var _cgo0 _Ctype_int = _Ctype_int /*line :860:36*/(joy); _cgo1 := /*line :860:43*/pointer; _cgoCheckPointer(_cgo1, nil); /*line :860:51*/_Cfunc_glfwSetJoystickUserPointer(_cgo0, _cgo1); }()
}

// GetUserPointer returns the current value of the user-defined pointer of the
// joystick. The initial value is nil.
//
// This function may be called from the joystick callback, even for a joystick
// that is being disconnected.
//
// This function may be called from any thread. Access is not synchronized.
func (joy Joystick) GetUserPointer() unsafe.Pointer {
	return ( /*line :871:9*/_Cfunc_glfwGetJoystickUserPointer /*line :871:36*/)( /*line :871:38*/_Ctype_int /*line :871:43*/(joy))
}

// IsGamepad returns whether the specified joystick is both present and
// has a gamepad mapping.
//
// If the specified joystick is present but does not have a gamepad mapping this
// function will return false but will not generate an error. Call Present to
// check if a joystick is present regardless of whether it has a mapping.
//
// This function must only be called from the main thread.
func (joy Joystick) IsGamepad() bool {
	return glfwbool(( /*line :883:18*/_Cfunc_glfwJoystickIsGamepad /*line :883:40*/)( /*line :883:42*/_Ctype_int /*line :883:47*/(joy)))
}

// UpdateGamepadMappings parses the specified ASCII encoded string and updates
// the internal list with any gamepad mappings it finds. This string may contain
// either a single gamepad mapping or many mappings separated by newlines. The
// parser supports the full format of the gamecontrollerdb.txt source file
// including empty lines and comments.
//
// See Gamepad mappings for a description of the format.
//
// If there is already a gamepad mapping for a given GUID in the internal list,
// it will be replaced by the one passed to this function. If the library is
// terminated and re-initialized the internal list will revert to the built-in
// default.
//
// This function must only be called from the main thread.
func UpdateGamepadMappings(mapping string) bool {
	m := ( /*line :901:7*/_Cfunc_CString /*line :901:15*/)(mapping)
	defer func() func() { _cgo0 := /*line :902:15*/unsafe.Pointer(m); return func() { _cgoCheckPointer(_cgo0, nil); /*line :902:33*/_Cfunc_free(_cgo0); }}()()
	return glfwbool(( /*line :903:18*/_Cfunc_glfwUpdateGamepadMappings /*line :903:44*/)(m))
}

// GetGamepadName returns the human-readable name of the gamepad from the
// gamepad mapping assigned to the specified joystick.
//
// If the specified joystick is not present or does not have a gamepad mapping
// this function will return empty string but will not generate an error. Call
// Present to check whether it is present regardless of whether it has a
// mapping.
//
// This function must only be called from the main thread.
func (joy Joystick) GetGamepadName() string {
	gn := ( /*line :916:8*/_Cfunc_glfwGetGamepadName /*line :916:27*/)( /*line :916:29*/_Ctype_int /*line :916:34*/(joy))
	return ( /*line :917:9*/_Cfunc_GoString /*line :917:18*/)(gn)
}

// GetGamepadState retrives the state of the specified joystick remapped to an
// Xbox-like gamepad.
//
// If the specified joystick is not present or does not have a gamepad mapping
// this function will return nil but will not generate an error. Call
// Present to check whether it is present regardless of whether it has a
// mapping.
//
// The Guide button may not be available for input as it is often hooked by the
// system or the Steam client.
//
// Not all devices have all the buttons or axes provided by GamepadState.
// Unavailable buttons and axes will always report Release and 0.0 respectively.
//
// This function must only be called from the main thread.
func (joy Joystick) GetGamepadState() *GamepadState {
	var (
		gs  GamepadState
		cgs  /*line :938:7*/_Ctype_GLFWgamepadstate /*line :938:25*/
	)

	ret := ( /*line :941:9*/_Cfunc_glfwGetGamepadState /*line :941:29*/)( /*line :941:31*/_Ctype_int /*line :941:36*/(joy), &cgs)
	if ret == ( /*line :942:12*/_Ciconst_GLFW_FALSE /*line :942:23*/) {
		return nil
	}

	for i := 0; i < 15; i++ {
		gs.Buttons[i] = Action(( /*line :947:26*/_Cfunc_GetGamepadButtonAtIndex /*line :947:50*/)(&cgs,  /*line :947:58*/_Ctype_int /*line :947:63*/(i)))
	}

	for i := 0; i < 6; i++ {
		gs.Axes[i] = float32(( /*line :951:24*/_Cfunc_GetGamepadAxisAtIndex /*line :951:46*/)(&cgs,  /*line :951:54*/_Ctype_int /*line :951:59*/(i)))
	}

	return &gs
}
