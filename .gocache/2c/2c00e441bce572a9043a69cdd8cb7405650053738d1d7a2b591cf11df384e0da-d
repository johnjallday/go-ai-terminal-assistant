// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jj/go/pkg/mod/github.com/go-gl/glfw/v3.3/glfw@v0.0.0-20240506104042-037f3cc74f2a/native_darwin.go:1:1
package glfw; import _cgo_unsafe "unsafe"

/*
#define GLFW_EXPOSE_NATIVE_COCOA
#define GLFW_EXPOSE_NATIVE_NSGL
#include "glfw/include/GLFW/glfw3.h"
#include "glfw/include/GLFW/glfw3native.h"

// workaround wrappers needed due to a cgo and/or LLVM bug.
// See: https://github.com/go-gl/glfw/issues/136
void *workaround_glfwGetCocoaWindow(GLFWwindow *w) {
	return (void *)glfwGetCocoaWindow(w);
}
void *workaround_glfwGetNSGLContext(GLFWwindow *w) {
	return (void *)glfwGetNSGLContext(w);
}
*/
import _ "unsafe"
import "unsafe"

// GetCocoaMonitor returns the CGDirectDisplayID of the monitor.
func (m *Monitor) GetCocoaMonitor() uintptr {
	ret := uintptr(func() _Ctype_CGDirectDisplayID{ _cgo0 := /*line :23:39*/m.data; _cgoCheckPointer(_cgo0, nil); return /*line :23:46*/_Cfunc_glfwGetCocoaMonitor(_cgo0); }())
	panicError()
	return ret
}

// GetCocoaWindow returns the NSWindow of the window.
func (w *Window) GetCocoaWindow() unsafe.Pointer {
	ret := func() _cgo_unsafe.Pointer{ _cgo0 := /*line :30:41*/w.data; _cgoCheckPointer(_cgo0, nil); return /*line :30:48*/_Cfunc_workaround_glfwGetCocoaWindow(_cgo0); }()
	panicError()
	return ret
}

// GetNSGLContext returns the NSOpenGLContext of the window.
func (w *Window) GetNSGLContext() unsafe.Pointer {
	ret := func() _cgo_unsafe.Pointer{ _cgo0 := /*line :37:41*/w.data; _cgoCheckPointer(_cgo0, nil); return /*line :37:48*/_Cfunc_workaround_glfwGetNSGLContext(_cgo0); }()
	panicError()
	return ret
}
