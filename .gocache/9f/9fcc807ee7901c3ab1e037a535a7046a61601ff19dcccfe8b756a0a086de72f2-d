// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jj/go/pkg/mod/github.com/go-gl/glfw/v3.3/glfw@v0.0.0-20240506104042-037f3cc74f2a/glfw.go:1:1
package glfw

//#include <stdlib.h>
//#define GLFW_INCLUDE_NONE
//#include "glfw/include/GLFW/glfw3.h"
import _ "unsafe"
import "unsafe"

// Version constants.
const (
	VersionMajor    = ( /*line :11:20*/_Ciconst_GLFW_VERSION_MAJOR /*line :11:39*/)    // This is incremented when the API is changed in non-compatible ways.
	VersionMinor    = ( /*line :12:20*/_Ciconst_GLFW_VERSION_MINOR /*line :12:39*/)    // This is incremented when features are added to the API but it remains backward-compatible.
	VersionRevision = ( /*line :13:20*/_Ciconst_GLFW_VERSION_REVISION /*line :13:42*/) // This is incremented when a bug fix release is made that does not contain any API changes.
)

// Init initializes the GLFW library. Before most GLFW functions can be used,
// GLFW must be initialized, and before a program terminates GLFW should be
// terminated in order to free any resources allocated during or after
// initialization.
//
// If this function fails, it calls Terminate before returning. If it succeeds,
// you should call Terminate before the program exits.
//
// Additional calls to this function after successful initialization but before
// termination will succeed but will do nothing.
//
// This function may take several seconds to complete on some systems, while on
// other systems it may take only a fraction of a second to complete.
//
// On Mac OS X, this function will change the current directory of the
// application to the Contents/Resources subdirectory of the application's
// bundle, if present.
//
// This function may only be called from the main thread.
func Init() error {
	( /*line :36:2*/_Cfunc_glfwInit /*line :36:11*/)()
	return acceptError(APIUnavailable)
}

// Terminate destroys all remaining windows, frees any allocated resources and
// sets the library to an uninitialized state. Once this is called, you must
// again call Init successfully before you will be able to use most GLFW
// functions.
//
// If GLFW has been successfully initialized, this function should be called
// before the program exits. If initialization fails, there is no need to call
// this function, as it is called by Init before it returns failure.
//
// This function may only be called from the main thread.
func Terminate() {
	flushErrors()
	( /*line :52:2*/_Cfunc_glfwTerminate /*line :52:16*/)()
}

// InitHint function sets hints for the next initialization of GLFW.
//
// The values you set hints to are never reset by GLFW, but they only take
// effect during initialization. Once GLFW has been initialized, any values you
// set will be ignored until the library is terminated and initialized again.
//
// Some hints are platform specific. These may be set on any platform but they
// will only affect their specific platform. Other platforms will ignore them.
// Setting these hints requires no platform specific headers or functions.
//
// This function must only be called from the main thread.
func InitHint(hint Hint, value int) {
	( /*line :67:2*/_Cfunc_glfwInitHint /*line :67:15*/)( /*line :67:17*/_Ctype_int /*line :67:22*/(hint),  /*line :67:30*/_Ctype_int /*line :67:35*/(value))
}

// GetVersion retrieves the major, minor and revision numbers of the GLFW
// library. It is intended for when you are using GLFW as a shared library and
// want to ensure that you are using the minimum required version.
//
// This function may be called before Init.
func GetVersion() (major, minor, revision int) {
	var (
		maj  /*line :77:7*/_Ctype_int /*line :77:12*/
		min  /*line :78:7*/_Ctype_int /*line :78:12*/
		rev  /*line :79:7*/_Ctype_int /*line :79:12*/
	)

	( /*line :82:2*/_Cfunc_glfwGetVersion /*line :82:17*/)(&maj, &min, &rev)
	return int(maj), int(min), int(rev)
}

// GetVersionString returns a static string generated at compile-time according
// to which configuration macros were defined. This is intended for use when
// submitting bug reports, to allow developers to see which code paths are
// enabled in a binary.
//
// This function may be called before Init.
func GetVersionString() string {
	return ( /*line :93:9*/_Cfunc_GoString /*line :93:18*/)(( /*line :93:20*/_Cfunc_glfwGetVersionString /*line :93:41*/)())
}

// GetClipboardString returns the contents of the system clipboard, if it
// contains or is convertible to a UTF-8 encoded string.
//
// This function may only be called from the main thread.
func GetClipboardString() string {
	cs := ( /*line :101:8*/_Cfunc_glfwGetClipboardString /*line :101:31*/)(nil)
	if cs == nil {
		acceptError(FormatUnavailable)
		return ""
	}
	return ( /*line :106:9*/_Cfunc_GoString /*line :106:18*/)(cs)
}

// SetClipboardString sets the system clipboard to the specified UTF-8 encoded
// string.
//
// This function may only be called from the main thread.
func SetClipboardString(str string) {
	cp := ( /*line :114:8*/_Cfunc_CString /*line :114:16*/)(str)
	defer func() func() { _cgo0 := /*line :115:15*/unsafe.Pointer(cp); return func() { _cgoCheckPointer(_cgo0, nil); /*line :115:34*/_Cfunc_free(_cgo0); }}()()
	( /*line :116:2*/_Cfunc_glfwSetClipboardString /*line :116:25*/)(nil, cp)
	panicError()
}
